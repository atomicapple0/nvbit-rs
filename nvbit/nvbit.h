#pragma once
// contains definitions such as a `rust::Vec`.
#include "rust/cxx.h"

#include "nvbit-sys/nvbit_release/core/nvbit.h"
#include <cstddef>
#include <vector>

// the order is important: this requires cuda.h,
// which can only be correctly included by nvbit.h
//
// we forgot this for a long time
// this file is generated by cxx and contains the shared types between the FFI
// boundary
#include "nvbit-sys/src/lib.rs.h"

/* extern "C" */
/* size_t rust_nvbit_get_related_functions() { return 42; } */

/* extern "C" size_t rust_nvbit_get_related_functions(); */

/* std::unique_ptr<std::vector<CUfunction>>
 * rust_new_nvbit_get_related_functions( */
/* extern "C" */
/* rust::Vec<TestCUfunction> rust_nvbit_get_related_functions( */
/* std::unique_ptr<std::vector<uint8_t>> rust_nvbit_get_related_functions( */
std::unique_ptr<std::vector<CUfunctionShim>> rust_nvbit_get_related_functions(
    /* const CUctx_st &ctx, const CUfunc_st &func */
    CUcontext ctx, CUfunction func
    /* CUcontextShim ctx, CUfunctionShim func */
    /* TestCUcontext ctx, TestCUfunction func */
);

/* extern "C" rust::Vec<TestCUfunction> rust_new_nvbit_get_related_functions( */
/* extern "C" */
/* const std::vector<uint8_t> &rust_nvbit_get_instrs( */
/* extern "C++" */
/* std::unique_ptr<std::vector<uint8_t>> rust_nvbit_get_instrs( */
/* const std::vector<uint8_t> &rust_nvbit_get_instrs( */
/* std::unique_ptr<std::vector<Instr>> rust_nvbit_get_instrs( */
/* std::unique_ptr<std::vector<Instr>> rust_nvbit_get_instrs( */
/* std::unique_ptr<std::vector<std::unique_ptr<Instr>>> rust_nvbit_get_instrs( */
std::unique_ptr<std::vector<InstrShim>> rust_nvbit_get_instrs(
    /* const CUctx_st &ctx, const CUfunc_st &func */
    CUcontext ctx, CUfunction func
    /* CUcontextShim ctx, CUfunctionShim func */
    /* TestCUcontext ctx, TestCUfunction func */
);
